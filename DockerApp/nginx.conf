worker_processes auto;#configure number of worker processes to run usally based on the number of available CPU cores we configue this or auto is used
#configuring low-level, connection-related settings that affect how NGINX handles incoming client connections
events {
	worker_connections 4096; #maximum number of simultaneous connections that can be opened by a worker process
    multi_accept on; #allows a worker process to accept multiple connections at once
}

http {
	include       mime.types; #specifies the file that contains the mapping of file extensions to MIME types

	#upstream block that defines a group of backend servers for load balancing
	upstream procuctapi_backend{
		#Round robin is default load balancing used can also use ip_hash for sticky session or hash for consistancy
		least_conn; #load balancing method that routes requests to the server with the least number of active connections
		server productapi:8080; #specifies the address of the backend server you can specify multiple servers like this servicename:internalport
		server productapi_dup:8080; #another backend server for demonstration of load balancing
	}

	server{ #server block that defines a virtual server
		listen 80; #we configured nginx to listen to internal port 80 in docker-compose.yml
		server_name localhost; #name of the server, used for virtual hosting
		location / {
			proxy_pass http://procuctapi_backend; #forwards requests to the upstream backend server
			proxy_set_header Host $host; #sets the Host header in the request to the value of the $host variable
			proxy_set_header X-Real-IP $remote_addr; #sets the X-Real-IP header to the client's IP address
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #sets the X-Forwarded-For header to include the client's IP address
			proxy_set_header X-Forwarded-Proto $scheme; #sets the X-Forwarded-Proto header to indicate the protocol used (HTTP or HTTPS)
		}
	}
}